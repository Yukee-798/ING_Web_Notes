/*
一、基本概念
    作用：正则表达式用于定义一些字符串的规则，计算机可以通过一个正则表达式来检查字符串是否符合规则
         还能将字符串中符合规则的子串提取出来

二、创建正则表达式对象
    1. 语法：
        var reg1 = new RegExp("正则表达式", "匹配模式");
        var reg2 = /正则表达式/匹配模式;

        参数1：传入一个正则表达式，下面会详细介绍
        参数2：匹配模式
                i 忽略大小写
                g 全局匹配模式


    2. test()
        作用：用于检测一个字符串是否符合该正则表达式的规则，返回true/false


    3. 正则表达式
        
        (1) 检测字符串是否含有某个子串：/子串/
            例子：
                var reg1 = /abc/;
                reg1.test("ef abc da"); // true

        (2) 检测字符串是含有 子串1 或 子串2 或 子串3 ...：/子串1|子串2|子串3|.../
            例子：
                var reg2 = /abc|abd/;
                reg2.test("df abc cw"); // true
                reg2.test("abd ccs"); // true
            
            
        (3) 检测字符串中是否有 字母a 或 字母b 或 字母c ...：/[abc...]/
            例子：
                var reg3 = /[abc]/
                reg3.test("efc"); // true

        (3) 检测字符串中是否含有小写字母或大写字母：[a-z]|[A-Z] 或者 [A-z]
            例子：
                var reg3 = [a-z]|[A-Z];
                reg3.test("莫二鸡蛋"); // false
                reg3.test("moerpidan"); // true

        (4) 检测长度为3的字母字符串首字母为a结尾为z：a[A-z]z

        (5) [^...] 不在方括号内的任意字符
                [^a-b]
                [^0-9]


        量词只对左边的一个内容起作用
        (6) 检测字符串中是否有连续出现10次的a：a{10}
            注意：量词只对前面它左边的一个内容起作用，abc{3} 等价于 abccc
                 可以使用小括号来指定，(abc){3} 等价于 abcabcabc

            ab{1,3}c 匹配字符串中开头为a，结尾为c，中间的b出现 1～3次 的子串
            ab{1,}c 匹配字符串中开头为a， 结尾为c，中间的b出现 1～∞次 的子串

             ab+ 等价于 ab{1,} b至少出现一次
             ab* 等价于 ab{0,}
             ab? 等价于 ab{0,1}


        (7) ^a 表示是否以a开头，注意区别[^a]
            b$ 表示是否以b结尾

            ^abcd$ 表示以a开头以d结尾，且中间有两个字符bc
            ^a|b$ 以a开头或者以b结尾


            案例：检测一个字符串是否为合法手机号
                规则：1. 以1开头
                     2. 第二位为3-9任意数字
                     3. 三位以后为任意数字9个

                     ^1[3-9][0-9]{9}$



    4. String对象中与正则表达式相关的方法
        (1) split()
            例子：
                将字符串中的字母提取出来
                var str = "abcd78efs900i9sdf";
                var strArr = str.split(/[A-z]/);

        (2) search() 
            作用：与indexOf()作用相同，但是可以传入一个正则表达式
            例子：
                找到以a开头z结尾的长度为3的字母子串
                var str = "adf asz afw"
                str.search(/a[A-z]z/);


        (3) match()
            作用：将字符串中符合正则表达式的内容提取到字符数组中，默认只提取第一个符合正则表达式的内容
                 如果想全部提取出来，则需要把正则表达式的匹配模式设置为 g 全局匹配

            例子：
                把字符串中所有数字提取出来
                var str = "ka90s93sf97asd11s6";
                console.log(str.match(/[0-9]/g)); // 909397116

        (4) replace()
            作用：将字符串内指定内容替换为新的内容
            参数1: 被替换的内容(可以为正则表达式)，参数2:新的内容

            例子：
                将字符串中所有字母替换为空格
                var str = "abd123asd456js7as9";
                console.log(str.replace(/[A-z]/g)); // 返回12345679

            




*/

// 1. 基本用法

// 是否包含某个子串
var reg = /abc/; // 是否包含 abc 这个子串

// 是否包含某个字符
var reg = /a|b|c/; // 是否包含 a 或 b 或 c 字符
var reg = /[abc]/; // 同上 

// 是否包含字母
var reg = /[A-z]/;

// 是否包含数字
var reg = /[0-9]/;

// 是否包含中文字符
var reg = /[\u4e00-\u9fa5]/;

// 是否不包含某些字符
var reg = /[^abc]/; // 不包含 a 和 b 和 c 字符


// 2. 量词的使用

// 某个字符串是否连续出现 10 次
var reg = /a{10}/;

// 某个字符串是否连续出现 1～3 次
var reg = /(abc){1,3}/;

// 某个字符串是否连续出现 3～∞ 次
var reg = /(abc){3,}/;

// 是否以某个字符串开头
var reg = /^(123)/;

// 是否以某个字符串结尾
var reg = /(123)$/;

// 检测一个字符串是否为合法手机号
// 首位为1，第二位为3-9，后9位为0-9
var reg = /^1[3-9][0-9]{9}$/;

// 判断字符串是否为中文字符或英语字母的正则表达式
var reg1 = /^([\u4e00-\u9fa5]|[A-z]){1,}$/;

// 判断字符串是否为数字
var reg2 = /^[0-9]{1,}$/;