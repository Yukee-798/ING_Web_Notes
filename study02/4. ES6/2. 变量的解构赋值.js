/*
一、本节涉及内容
    1. 数组的解构赋值
    2. 对象的解构赋值
    3. 字符串的解构赋值
    4. 数值与布尔值的解构赋值
    5. 函数参数的解构赋值

二、基本概念
    解构赋值：是一种 JS 语法，可以让值从数组、属性从对象中提取到不同到变量中

三、数组的解构赋值
    1. 基本用法
        const arr = [1, 2, 3, 4];
        let [a, b, c, d] = arr; // 将数组的值依次赋值给 a, b, c, d 变量

        let [e, f] = arr; // 将数组的前两个元素值赋值给 e 和 f

        let [ , g] = arr; // 将数组的第二个元素值赋值给 g

        比较复杂的操作
        const arr2 = [1, 2, 3, [4, 5, 6, [-1, -2, -3]]];
        // 给变量 h 赋值为 -3
        let [ , , , [ , , , [ , , h]]] = arr2;

    2. 扩展运算符 ...
        const arr1 = [1, 2, 3];
        const arr2 = ['a', 'b', 'c'];
        const arr3 = [4, 5, 6];

        // 合并这三个数组赋值给arr4
        const arr4 = [...arr1, ...arr2, ...arr3];

    3. 扩展运算符与解构赋值一起使用
        const arr1 = [1, 2, 3 ,4];
        const [a, ...b] = arr1; // 让数组第一个元素赋值给 a，后面剩余元素作为子数组赋值 给b

        注意：这里 const[a, ...b] 带有扩展运算符的变量只能放在最后面，否则会报错

    4. 设置默认值
        const arr1 = [1, 2, 3];
        const [a, b, c, d] = arr1; // 此时 d 没有匹配，会被赋值为undefined

        // 给 d 设置一个默认值
        const [a, b, c, d = 10] = arr1; // 如果 d 没有匹配或则匹配为undefined，则会赋值为默认值


    5. 通过数组的解构赋值来快速交换两个变量值
        let a = 10, b = -10;

        // 左边是数组解构赋值的形式，右边是一个数组
        [a, b] = [b, a];

    6. 直接接受函数返回值为数组的数组内容
        场景：
            有一个函数可以通过 id 来获取用户的信息
*/
let a = 10,
    b = -10;
console.log(a + ' ' + b);
// 左边是数组解构赋值的形式，右边是一个数组
[a, b] = [b, a];
console.log(a + ' ' + b);