/*
一、闭包基本概念
    1. 如何产生闭包？
        当一个嵌套的内部函数引用了其外部元素的变量/函数时，内部函数就产生了闭包

    2. 闭包是什么？
        理解一：闭包是嵌套的内部函数
        理解二：闭包是嵌套的内部函数中 保存了 在内部函数引用外部变量/函数 的对象

    3. 产生闭包的条件
        (1) 函数嵌套 
        (2) 内部函数引用外部函数的数据
        (3) 执行外部函数：保证内部函数执行定义，内部函数定义完后如果有引用外部函数的数据，其内部就会产生一个闭包对象，保存了引用的这些数据

        function fn1() {
            var a = 3;

            function fn2() {
                console.log(a);
            }
        }

        fn1();

二、常见的闭包
    1. 将函数作为另外一个函数的返回值
        function fn1() {
            var a = 3;

            function fn2() {
                a++;
                console.log(a);
            }
            return fn2;
        }

        var f = fn1();
        f(); // 4
        f(); // 5

        说明： 只调用一次外部函数， 产生了一个内部函数对象(因而只存在一个闭包)
            内部函数对象作为返回值将其引用传递了出去，没有销毁，闭包也没被销毁，闭包内保存的值也依旧存在

    2. 


*/